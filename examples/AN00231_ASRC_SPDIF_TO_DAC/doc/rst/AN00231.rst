.. include:: ../../README.rst

|newpage|

Overview
--------

Introduction
............

The XMOS Asynchronous Sample Rate Converter (ASRC) provides a way of streaming high quality audio between the two clock domains which are not synchronized. The ASRC library itself is a function call that operates on blocks of samples whereas the S/PDIF and I2S peripheral libraries provide streaming audio one sample at a time. To fit the ASRC between two audio streaming requires a framework that can handle streaming samples in and out of buffers and a rate monitor task which keeps track of the precise rate difference between the source and the sink.


Block Diagram
.............

.. figure:: images/block_diagram.pdf
   :width: 80%

   Application block diagram

The application uses a number of tasks to send and receive audio samples, convert from serial (streaming) samples to block buffers, timestamp and monitor the stream rates and of course sample rate convert asynchronously. In addition, there are a number of control tasks to complete the application including configure the codecs via I2C and GPIO, read buttons and display a matrix of 4 x 4 multiplexed LEDs. 


SPDIF Receive to I2S using ASRC Demo
------------------------------------

The Makefile
............

To start using the ASRC, you need to add ``lib_src`` to you Makefile::

  USED_MODULES = .. lib_src ...

This demo also uses the library (``lib_i2c``), the GPIO library (``lib_gpio``), I2S and SPDIF libraries (``lib_i2s``, ``lib_spdif``)) and the logging library (``lib_logging``) to provide a lighweight version of printf. The  library is used to configure the audio codecs. The GPIO library abstracts the use of an 8-bit port to drive individual reset and select lines. The SPDIF library provides the source of audio samples, with encoded clock, via SPDIF Rx and the I2S library provides a audio sink using I2S output to drive a DAC.

So the Makefile also
includes::

  USED_MODULES = .. lib_gpio lib_i2c lib_i2s lib_logging lib_spdif ..


Includes
........

All xC files which declare the application ``main()`` function need to include ``platform.h``. XMOS xCORE specific defines for declaring
and initialising hardware are defined in ``xs1.h``.

.. literalinclude:: main.xc
   :start-on: include <xs1.h>
   :end-on: include <platform.h>


The ASRC library functions are defined in ``src.h``. This header must be included in your code to use the library, along with the header functions contained within the /api section of each of the supporting libraries.

.. literalinclude:: main.xc
   :start-on: include <src.h>
   :end-on: include <gpio.h>

The are four application includes which have the following purpose. ``block_serial.h``, ``main.h`` & ``s4384_5368.h`` all contain prototypes of the functions/tasks contained within thier respective xC source files as well as defining types of variables and interfaces used to communicate with them.


.. literalinclude:: main.xc
   :start-on: include "main.h"
   :end-on: include "app_config.h"

The header file ``app_config.h`` contains defines that are used to configure the application settings including the number of channels, ASRC input block size and maximum input to output ratio (used for defining buffer sizes) and number of logical cores used to carry out the ASRC processing. It also includes information about the local MCLK frequencies used for driving the I2S iterface. Note that no MCLK information is required for SPDIF receive because the received samples are timestamped and which allows the application to recover the precise sample rate, without the need for a PLL.

.. literalinclude:: app_config.h
   :start-on: define     ASRC_N_CHANNELS
   :end-on: define     MCLK_FREQUENCY_44

Allocating hardware resources
.............................

The audio interfaces require I/O ``ports`` to commicate with the external components, as well as ``clock blocks`` to manage the rate of sampling and outputs. All ports and clock blocks are declared on the tile they reside since the chip used in the hardware has two tiles. 

In the case of SPDIF receive, it needs only a single 1b port and clock block.


I2S requires multiple 1b ports for MCLK input, BCLK output, LRCLK output and DATA, as well as two clock blocks for managing MCLK and BCLK. 

.. literalinclude:: main.xc
   :start-on: #define AUDIO_TILE                      0
   :end-on: XS1_PORT_1P};

To support human input and visual output from within the application additional I/O ports are declared which map to the buttons and LEDs on the hardware. In addition, there is an 8b output port which controls the reset pins configures the clocking modes on the board. Together with configration via I2C, this allows the DAC and ADC to be setup as required for the application.

.. literalinclude:: main.xc
   :start-on: out port p_leds_col
   :end-on: port p_buttons

The application main() function
...............................

The ``main()`` function in the program sets up the tasks in the application.

Firstly, the ``interfaces`` and ``channels`` are declared. In xC interfaces and channels provide a means of concurrent tasks communicating with each other. In this application there are many interfaces connecting up the tasks. Each interface has a concept of ``client`` and ``server`` where the client initiates the communication and the server responds. Typically, a server is waiting for commands or data to be sent from the client whereupon it performs some processing. The processing may result in a response on the same interface, an I/O event, initiation of a transaction on another interface or a change in some state which may be queired later by another client. All of these cases are demonstrated within this application.

A single channel is used which is required by the lib_spdif component which uses a streaming channelfor performance reasons as it provides a short FIFO allowing outputs within that component to be decoupled. 

.. literalinclude:: main.xc
   :start-on: serial_transfer_push_if i_serial_in;
   :end-on: streaming chan c_spdif_rx;

The rest of the ``main`` function starts all the tasks in parallel using the xC ``par`` construct:

.. literalinclude:: main.xc
   :start-on: par{
   :end-on: return 0

.. tip::
   The ``asrc()`` task is preceded by a for-loop like construct ``par(int i=0; i<ASRC_N_INSTANCES; i++)``. This construct is called a parallel replicator and instantiates ``ASRC_N_INSTANCES`` instances of the ``asrc()``. The index within the replicator allows the interface array passed to the task to be indexed appropriately.

This code starts all of the tasks in parallel. Note that each task has an ``on tile[]`` placement directive which maps that particular task to a tile. For example, the I2S task must run on the tile to which the ADC and DAC are connected on the hardware.

In addition, some tasks also include an ``on tile[].core[]`` directive which instructs the compiler to place these tasks (which must be written and tagged as ``combinable``) on the same logical core. Tasks marked as ``distributable`` are automatically distributed across logical cores by the compiler if possible. For further information regarding dsitributable and combinable tasks, please see section 2.3 of the XMOS Programming guide "Creating tasks for flexible placement".

|newpage|

Audio Source and Sink
.....................

The ASRC allows two audio clock domains to be bridged. In order to effectively demonstrate this, SPDIF receive was chosen as the audio source because it is synchrnoised to the clock of the SPDIF transmitter, which is external to the hardware used. The I2S audio output has it's own local clock driven by a crystal source on the xCORE-200 Multichannel Audio Platform.

The usage and operation of the SPDIF and I2S functions is described in the associated documentation for those libraries.


Configuring audio codecs
........................

Two audio codecs are used on the xCORE-200 Multichannel Audio Platform. A Cirrus CS5368 for audio input and a Cirrus CS4384 for audio output, although only the output path is used for this demonstration. These codecs have to be configured before they can be used. The ``audio_codec_cs4384_cs5368()`` task handles this via an interface call over ``i_codec`` which in turn makes a call to methods the ``i_i2c`` client interface and ``i_gpio`` client interfaces to make the necessary settings.

.. literalinclude:: cs4384_5368.xc
   :start-after: [[distributable]]
   :end-on: client output_gpio_if i_mclk_fsel)

If you are porting this application to a different xCORE development board then this is the function that will have to be modified to configure the relevant codecs for that board.

The usage and operation of I2C and GPIO functions is described in the associated documentation for those libraries.


SPDIF Handler
.............

The SPDIF library uses a channel interface to receive samples from the SPDIF receiver when they are decoded. The rest of the application uses xC interfaces to communicate and so a thin task is included which simple receives samples and forwards them to the next stage over an interface. Because this task initiates the communication, it is connected to the client side of the interface.

.. literalinclude:: main.xc
   :start-after: pragma unsafe arrays   //Performance optimisation
   :end-on: void spdif_handler(streaming chanend c_spdif_rx, client serial_transfer_push_if i_serial_in)

I2S Handler
...........

The I2S library uses a callback type interface which treats the handler as a server. This is because I2S has strict timing requirements and must have samples provided and taken without delay at the beginning of each frame in order to preserve timing. The purpose of the I2S handler is to provide samples to I2S immediately when required and pull samples from the generic block2serial interface as needed. It also handles the case of initialization when I2S starts up. The interface to block2serial is a server interface and so a ``notification`` is included which allows the I2S handler to notify block2serial that it requires samples, which are the received over the server side of the interface.

.. literalinclude:: main.xc
   :start-before: pragma unsafe arrays   //Performance optimisation for this task
   :end-on: void i2s_handler(server i2s_callback_if i2s, server serial_transfer_pull_if i_serial_out, client audio_codec_config_if i_codec)

In addition, the I2S handler calls a method in the ``i_codec`` client interface to request reconfiguration of the hardware on a sample rate change. It also listens on the ``i_buttons`` server side interface to see when a change in sample rate is requested via user input, and restarts the I2S component at the new sample rate.


Serial to Block
...............

The ASRC processing task receives blocks of samples whereas the SPDIF receive component provides samples one left/right pair at a time. This means we need a task that fills a block buffer up with samples until it is full, whereupon it passes the entire block to the ASRC tasks. The ``serial2block()`` task receives streaming samples on the server side of the ``i_serial_in`` interface and pushes out block of samples on the ``i_block_transfer`` client side interface. Because there are multiple ASRC tasks, the ``i_block_transfer`` is an array of interfaces, where the left and right samples are separated out into individual paths.

.. literalinclude:: block_serial.xc
   :start-on: void serial2block(server serial_transfer_push_if i_serial_in, client block_transfer_if i_block_transfer[ASRC_N_INSTANCES], server sample_rate_enquiry_if i_input_rate)
   :end-on: void serial2block(server serial_transfer_push_if i_serial_in, client block_transfer_if i_block_transfer[ASRC_N_INSTANCES], server sample_rate_enquiry_if i_input_rate)


Because the input block size to the ASRC is fixed on initialization, the buffer scheme used for the block is a double buffer (ping-pong) which allows one side to be filled while the other is emptied. See the lib_src documentation for details on the buffer format expected by ASRC.

The Serial to Block function has one additional function which is to timestamp the samples it receives on the serial interface. When queried over the ``i_sr_input`` server side interface, it returns the number of samples and elapsed time. Using a 10ns timer and a query rate of 100ms, it allows a theoretical rate measurement accuracy of 0.1PPM.

The Serial to Block function is designed to be generic so that it can be used with a range of audio sources. Only the ``SPDIF Handler`` (or appropriately named task) need be customized when adapting this demonstration for use with other audio sources.



Block to Serial
...............

The Block to Serial function provides the opposite functionality to Serial to Block; that is it takes blocks of samples from the ASRC output and serves up a serial stream to the the downstream audio sink.

.. literalinclude:: block_serial.xc
   :start-on: unsafe void block2serial(server block_transfer_if i_block2serial[ASRC_N_INSTANCES], client serial_transfer_pull_if i_serial_out, server sample_rate_enquiry_if i_output_rate)
   :end-on: unsafe void block2serial(server block_transfer_if i_block2serial[ASRC_N_INSTANCES], client serial_transfer_pull_if i_serial_out, server sample_rate_enquiry_if i_output_rate)

However, it differs in one main aspect. The output from ASRC is a *variable* size block of samples the size of which will vary sample by sample. This means a double-buffer scheme cannot be used because it doesn't provide any support for varying block sizes. This would especially be an issue where the emptying block is a different size to the filling block, which does occur in this situation. To solve this problem, a FIFO is used which introduces some elasticity permitting the varying rates. Use of the FIFO has the added benefit that the fill level can be monitored. The fill level provides important information about the rate ratio between input and output and effective provides an **I** term for a PI loop, which is necessary for the rate matching servo algorithm to work. See the Rate Server section for further details.

The FIFO also helps buffer any small errors in rate difference when either the source or sink rate wanders. The size of the FIFO is set by ``OUT_FIFO_SIZE`` and is initialized to twice the maximum number of samples that may be produced by a single call to the ASRC function.

.. literalinclude:: app_config.h
   :start-on: define     OUT_FIFO_SIZE
   :end-on: define     OUT_FIFO_SIZE

To enable the use of C-style pointers (without bounds checking to improve performance and to enable compatibility with C-code), unsafe pointers have been used. This requires that the entire scope of this block is declared unsafe to indicate to the reader that memory safety is maintained by the code's functionality rather than the compiler.


Rate Server
...........

The Rate Server function performs an essential function with the ASRC demonstration. It monitors the rate of the input and output streams and calculates the ``fs_ratio`` (sample rate ratio) to provide to the ASRC algorithm each time it is called. The Rate Server acquires information regarding stream rate and FIFO fill level from the serial/block tasks via a client side interfaces ``i_spdif_rate`` and ``i_2s_rate`` on a periodic basis. It then implements a PI controller and applies some simple filtering using a first order low pass filter to reduce any jitter introduced from rate measurements. The calculated fs_ratio is served up to the ASRC tasks via the ``i_fs_ratio`` server side interface using the ``get_ratio`` method.

.. literalinclude:: main.xc
   :start-on: void rate_server(client sample_rate_enquiry_if i_spdif_rate, client sample_rate_enquiry_if i_i2s_rate,
   :end-on: server fs_ratio_enquiry_if i_fs_ratio[ASRC_N_INSTANCES], client led_matrix_if i_leds)

It uses a unsigned Q20.12 fixed point variable to calculate the current sample rate and passes the calculated and filtered fs_ratio is passed to the ASRC task using an unsigned Q4.28 fixed point representation.

The Rate Server also monitors the input and output rates to work out what the nominal sample rates are using a table which specifies the range of values considered acceptable for a nominal rate. The table is initialized to accept a deviation of up to 1000PPM, as supported by the ASRC library.

.. literalinclude:: main.xc
   :start-on: define SR_TOLERANCE_PPM 
   :end-on: define UPPER_LIMIT(freq)

The nominal sample rates are monitored for change using a VALID/INVALID flag. For example, a change in rate will always transition through an INVALID state. When this occurs, a notification is sent to the ASRC task using the server side interface ``fs_ratio_enquiry_if`` which then queries back to the Rate Server for the nominal sample rate. This information is used to re-initialize the ASRC core filters to support the required major rate change.

The Rate Server also acts as a simple application and outputs information about buffer level and sample rates to the LED matrix using the client side interface method``i_leds.set()``, as well as printing internal state to the console on a periodic basis.

The rates at which the fs_ratio is calculated and the internal state is printed to the console is defined by the following values:

.. literalinclude:: main.xc
   :start-on: define SR_CALC_PERIOD
   :end-on: REPORT_PERIOD   100100000



Asynchronous Sample Rate Conversion
...................................

These tasks handle calling the core ASRC algorithm function calls. There is one task per audio channel (2) and each is given dedicated task running on a logical core to ensure that a guaranteed amount of performance is available for the ASRC. 

.. literalinclude:: main.xc
   :start-on: void asrc(server block_transfer_if i_serial2block, client block_transfer_if i_block2serial, client fs_ratio_enquiry_if i_fs_ratio)
   :end-on: void asrc(server block_transfer_if i_serial2block, client block_transfer_if i_block2serial, client fs_ratio_enquiry_if i_fs_ratio)

There are three interface connections to each of the tasks. The samples are pushed into the ASRC task as a block over the ``i_serial2block`` interface. This triggers calling of the asrc_process() function which, on completion, pushes the output sample block over the client side ``i_block2serial`` interface. Included within each of these interface calls is a parameter indicating the number of samples within the block.

The ASRC processing call is not actually made within the input sample push select case. The reason for this is that the task on the other side of the interface would block until completion of the case (i.e. break; is reached). To allow the ``serial2block`` client to continue unblocked after the sample block push, a flag is set which indicates that the ASRC processing should be called in the default case of the ``select`` statement, using a poll loop.

An additional ``select`` ``case`` is included within the main select loop which is used to notify the ASRC task of a change in either the input or output sample rates. When this occurs a call to ``asrc_init()`` is made which initializes the ASRC and sets up the cascaded filters to support the required rate change.

To ensure that 100MHz (Assuming 500MHz core clock) is allocated to each of the ASRC tasks, a built-in function is called to force the logical core to issue every 5 slots.

.. literalinclude:: main.xc
   :start-on: set_core_high_priority_on
   :end-on: set_core_high_priority_on

set_core_high_priority_on

LED Driver
..........

The 16 LEDs on the xCORE-200 Multichannel Audio Platform are arranged in a 4x4 matrix and are multiplex as rows and columns. Consequently, to be able to address each LED individually, a simple task to multiplex the LEDs based on a 16bit bitmap is provided. The LEDs are set and cleared when the ``i_leds.set()`` server side interface method is called. A time keeps track of the column multiplexing and outputs the appropriate nibble to display the 16bit bitmap on the LEDs. 

.. literalinclude:: main.xc
   :start-on: [[combinable]]void led_driver(server led_matrix_if i_leds, out port p_leds_col, out port p_leds_row)
   :end-on: [[combinable]]void led_driver(server led_matrix_if i_leds, out port p_leds_col, out port p_leds_row)

The LED matrix display task is a low performance task that is ideal to be combined with other tasks onto a single logical core.

Button Listener
...............

A simple task that periodically reads and de-bounces the button inputs is included. It detects when the button is pressed and sends the index of the pressed button over the client side interface method ``i_buttons.pressed()``.

.. literalinclude:: main.xc
   :start-on: [[combinable]]void buttons(server buttons_if i_buttons)
   :end-on: [[combinable]]void buttons(server buttons_if i_buttons)

The button listener task is a low performance task that is ideal to be combined with other tasks onto a single logical core.


|newpage|

|appendix|

Demo hardware setup
-------------------

The demo is designed to run on the xCORE-200 Multichannel Audio Platform. To run the
demo:

 * Connect the XTAG-2 or XTAG-3 USB debug adapter to the xCORE-200 Multichannel Audio Platform.
 * Connect the XTAG-2 or XTAG-3 to the host PC using USB extension cable.
 * Connect an optical SPDIF source to the Rx TOSLINK connector.
 * Connect headphones or speakers to the channels 1/2 of the line out 3.5mm jack.
 * Connect the 12V power adaptor to the xCORE-200 Multichannel Audio Platform.

.. figure:: images/hardware_setup.pdf
   :scale: 100%
   :align: center

   Hardware setup for XMOS I2S master loopback demo

|newpage|

Launching the demo device
-------------------------

Once the application source code is imported into the tools it can be built by pressing the :menuitem:`Build` button in the xTIMEcomposer. This will create the ``AN00231_ASRC_SPDIF_TO_DAC.xe`` binary in the ``bin`` folder of the project. xTIMEcomposer may have to import the dependent libraries if you do not already have them in your workspace; this will occur automatically on build.

A *Run Configuration* then needs to be set up. This can be done by selecting the :menuitem:`Run,Run Configurations...` menu. You can create a new run configuration by right clicking on the :menuitem:`xCORE application` group in the left hand pane and :menuitem:`New`.

Select your XMOS XTAG in the Target box and click **Apply**. You can
now click the **Run** button to launch the application.

If you wish to view the reported values from the Rate Server task in the console, ensure that the **Target I/O** -> **xSCOPE via xCONNECT** option is set. xSCOPE printing is already enabled within the application.

Alternatively, the command line tools can be used to build and run the application.

Building is done by changing to the folder containing the ``src`` sub-folder and doing a call to ``xmake``. Running the application is then done using ``xrun --xscope bin/AN00231_ASRC_SPDIF_TO_DAC.xe``.

The audio from the SPDIF input should now be playing on channels 1/2 of the DAC output.

LED Indicators
..............

The column of four LEDs closest to the analog outputs indicates the sample rate of I2S, The column closes the crystal indicates the sample rate of the received SPDIF stream. The two columns in between show the current buffer fill level, where zero indicates exactly half full (the target level). The table below provides further detail of the LED meanings.

.. list-table:: LED Indicator meaning
     :header-rows: 2

     * - 
       - Row
       -
       -
       -
     * - Column
       - 1
       - 2
       - 3
       - 4
     * - 4
       - I2S >= 96KHz
       - Buffer > 12 samples
       - Buffer > 6 samples
       - SPDIF >= 96KHz
     * - 3
       - I2S >= 88.2KHz
       - N/A
       - Buffer > 0 samples
       - SPDIF >= 88.2KHz 
     * - 2
       - I2S >= 48KHz
       - N/A
       - Buffer < 0 samples
       - SPDIF >= 44.1KHz
     * - 1
       - I2S >= 44.1KHz
       - Buffer < -12 samples
       - Buffer < -6 samples
       - SPDIF >= 44.1KHz

Change the I2S rate
...................

The rate of the I2S interface can be changed by pressing button 1. Each press of the button cycles through 44.1KHz -> 48KHz -> 88.2KHz -> 96KHz and wraps back to the beginning.


|newpage|

References
----------

.. nopoints::

 * XMOS Tools User Guide

   http://www.xmos.com/published/xtimecomposer-user-guide

 * XMOS xCORE Programming Guide

   http://www.xmos.com/published/xmos-programming-guide

 * XMOS I2S/TDM Library

   http://www.xmos.com/support/libraries/lib_i2s

 * XMOS I2C Library

   http://www.xmos.com/support/libraries/lib_i2c

 * XMOS GPIO Library

   http://www.xmos.com/support/libraries/lib_gpio

|newpage|

Full source code listing
-------------------------

Source code for app_config.h
............................

.. literalinclude:: app_config.h
   :largelisting:

Source code for main.h
......................

.. literalinclude:: main.h
   :largelisting:

Source code for main.xc
.......................

.. literalinclude:: main.xc
   :largelisting:

Source code for block_serial.h
...............................

.. literalinclude:: block_serial.h
   :largelisting:

Source code for block_serial.xc
...............................

.. literalinclude:: block_serial.xc
   :largelisting:


Source code for cs4384_5368.h
.............................

.. literalinclude:: cs4384_5368.h
   :largelisting:

Source code for cs4384_5368.xc
..............................

.. literalinclude:: cs4384_5368.xc
   :largelisting:

|newpage|
